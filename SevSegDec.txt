`timescale 1ns / 1ps

module SevSegDec(
    input BTNC, // Center button
    input BTNR, // Right button
    input BTNL, // Left button
    input BTNU, // Up button
    input BTND,  // Down button
    //output reg [3:0] anode_active,
    output reg [0:6] segments
);

// Define outputs for LEDs to indicate which segment is active
reg [4:0] led_output; // LEDs LD12, LD13, LD14, LD15

// Define counter for current active segment
reg [1:0] active_segment = 2'b00; // Initially, start with the far-most left segment (segment 0)

//integer adjust = 0; // when adjust is 0 it indicates we are in alarm/clock mode
integer i[4]; // Counter for the current time for each 7-segment digit

// Initialize counters for each digit
initial begin
    for (int j = 0; j < 4; j = j + 1) begin
        i[j] = 0;
    end
end

// Case block to determine which segment to display based on the current active segment
always @* begin
    case (active_segment)
        2'b00: begin // Far-most left segment
            case (i[0])
            0: segments = 7'b0000001; // 0
            1: segments = 7'b1001111; // 1
            2: segments = 7'b0010010; // 2
            3: segments = 7'b0000110; // 3
            4: segments = 7'b1001100; // 4
            5: segments = 7'b0100100; // 5
            6: segments = 7'b0100000; // 6
            7: segments = 7'b0001111; // 7
            8: segments = 7'b0000000; // 8
            9: segments = 7'b0000100; // 9
                default: segments = 7'b0000001; // Default to 0
            endcase
            led_output = 4'b10000; // LD15 is active
        end
        2'b01: begin // 2nd segment from the left
            case (i[1])
            0: segments = 7'b0000001; // 0
            1: segments = 7'b1001111; // 1
            2: segments = 7'b0010010; // 2
            3: segments = 7'b0000110; // 3
            4: segments = 7'b1001100; // 4
            5: segments = 7'b0100100; // 5
            6: segments = 7'b0100000; // 6
            7: segments = 7'b0001111; // 7
            8: segments = 7'b0000000; // 8
            9: segments = 7'b0000100; // 9
                default: segments = 7'b0000001; // Default to 0
            endcase
            led_output = 4'b01000; // LD14 is active
        end
        2'b10: begin // 3rd segment from the left
            case (i[2])
            0: segments = 7'b0000001; // 0
            1: segments = 7'b1001111; // 1
            2: segments = 7'b0010010; // 2
            3: segments = 7'b0000110; // 3
            4: segments = 7'b1001100; // 4
            5: segments = 7'b0100100; // 5
            6: segments = 7'b0100000; // 6
            7: segments = 7'b0001111; // 7
            8: segments = 7'b0000000; // 8
            9: segments = 7'b0000100; // 9
                default: segments = 7'b0000001;
            endcase
            led_output = 4'b00100; // LD13 is active
        end
        2'b11: begin // Far-most right segment
            case (i[3])
            0: segments = 7'b0000001; // 0
            1: segments = 7'b1001111; // 1
            2: segments = 7'b0010010; // 2
            3: segments = 7'b0000110; // 3
            4: segments = 7'b1001100; // 4
            5: segments = 7'b0100100; // 5
            6: segments = 7'b0100000; // 6
            7: segments = 7'b0001111; // 7
            8: segments = 7'b0000000; // 8
            9: segments = 7'b0000100; // 9
                default: segments = 7'b0000001; // Default to 0
            endcase
            led_output = 4'b00010; // LD12 is active
        end
        default: begin
            segments = 7'b0000001; // Default to 0
            led_output = 4'b00000; // All LEDs off
        end
    endcase
end


//if(adjust==1) begin
// Increment or decrement the counter based on button presses
always @* begin
    if (BTNU && i[active_segment] < 9) // UP button and limit check
        i[active_segment] = i[active_segment] + 1;
    else if (BTND && i[active_segment] > 0) // DOWN button and limit check
        i[active_segment] = i[active_segment] - 1;
end

// Change active segment based on button press
always @* begin
    if (BTNC && BTNL) // CENTER and LEFT button pressed
        active_segment = (active_segment == 2'b00) ? 2'b11 : active_segment - 1; // wrap around if already at segment 0
end

// Assign LED outputs to the LEDs LD12, LD13, LD14, LD15, LD0
assign {led_output, 4'b00000} = led_output; // LD12 is connected to the left-most segment, LD13 to the 2nd, LD14 to the 3rd, and LD15 to the right-most segment

endmodule
